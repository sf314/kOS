// Try again with the hopper!
// Testing implementation of PID controller
parameter desiredAlt.

LOCK STEERING TO R(0,0,-90) + HEADING(90,90). // new heading thing

// Countdown
from {set x to 10.} until x = 0 step {set x to x - 1.} do {
  clearscreen.
	print x.
	wait 1.
}
clearscreen.
stage.



// calculating thrust for TWR of 1 (and lock it)
function getTWR {
  set funcThrust to ship:maxthrust. // Vars
  set weight to ship:mass * 9.81.
  set funcTWR to funcThrust / weight. // Math
  return funcTWR. // return
}






// *** PID setup
SET g TO KERBIN:MU / KERBIN:RADIUS^2.
LOCK accvec TO SHIP:SENSORS:ACC - SHIP:SENSORS:GRAV.
LOCK gforce TO accvec:MAG / g.

// PID should take twr and output thrust
set throttlePID to PIDLOOP(0.01, 0.006, 0.006).
set throttlePID:setpoint to 1.2. // targeting 1.2g accel

print "ascending to 10m/s at 1.2g".
set thr to 0.
lock throttle to thr.
until verticalspeed > 10 {
  set thr to thr + throttlePID:Update(time:seconds, gforce).
  wait 0.001.
}

print "ascending at 10m/s at 1g".
set throttlePID:setpoint to 1.
until alt:radar > desiredAlt - 20 {
  set thr to thr + throttlePID:Update(time:seconds, gforce).
  wait 0.001.
}

print "preparing for hover".
set throttlePID:setpoint to 0.5.
until verticalspeed < 3 {
  set thr to thr + throttlePID:Update(time:seconds, gforce).
  wait 0.001.
}

print "hovering".                     // go back and forth between 1.2 and 0.8 g's
set throttlePID:setpoint to 1.
set time0 to time:seconds.
until time:seconds - time0 > 20 {

  if verticalspeed > 0 {
    set throttlePID:setpoint to 0.8.
    print "More" at (1, 4).
  } else {
    set throttlePID:setpoint to 1.2.
    print "Less" at (1, 4).
  }

  set thr to thr + throttlePID:Update(time:seconds, gforce).
  wait 0.001.
}

print "Done".
